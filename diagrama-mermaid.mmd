---
config:
  theme: mc
id: ca1156c1-1c52-4377-a4e9-8b4ec3c6e6d5
---
classDiagram

    class Usuario {
        -nombre: string
        -email: string
        -contraseña: string
        -deporteFavorito: string
        -nivel: Nivel
        -ubicacion: Ubicacion
        -edad: int
        -genero: string
        -historialPartidos: list~Partido~
        +agregarAPartidoHistorial(partido: Partido)
    }

    class Nivel {
        <<enumeration>>
        +PRINCIPIANTE
        +INTERMEDIO
        +AVANZADO
        + desde(texto: string): Nivel
        + esCompatibleCon(otro: Nivel): boolean
        + estaEnRango(minimo: Nivel, maximo: Nivel): boolean
    }
    
    class ServicioDePartidos {
      -buscadorPartidos: BuscadorPartidos
      -partidosDisponibles: list~Partido~
      -notificacionManager: NotificacionManager
      -gestorPartido: GestorPartido
      -servicioProgramador: ServicioProgramador
      + registrarPartido(partido: Partido)
      + buscarPartidosCercanos(usuario: Usuario, radioKm: double): list~Partido~
      + buscarPorDeporte(usuario: Usuario, deporte: string): list~Partido~
    }

    class GestorPartido {
        -notificacionManager: NotificacionManager
        + crearPartido(factory: PartidoFactory, fecha: string, ubicacion: Ubicacion, organizador: Usuario): Partido
        + agregarJugador(partido: Partido, usuario: Usuario): boolean
        + confirmarPartido(partido: Partido): boolean
        + cancelarPartido(partido: Partido): boolean
        + iniciarPartido(partido: Partido): boolean
        + finalizarPartido(partido: Partido): boolean
    }

    class BuscadorPartidos {
        -estrategiasActivas: list~EstrategiaBusqueda~
        + buscarPartidos(partidos: list~Partido~, usuario: Usuario): list~Partido~
        + buscarPartidosCercanos(partidosDisponibles: list~Partido~, usuario: Usuario, radioKm: double): list~Partido~
        + buscarPartidosPorDeporte(partidosDisponibles: list~Partido~, usuario: Usuario, deporte: string): list~Partido~
        + agregarEstrategia(estrategia: EstrategiaBusqueda)
    }
    
    class Partido {
        -fecha: string
        -deporte: string
        -estadoActual: EstadoPartido
        -organizador: Usuario
        -criterios: CriteriosPartido
        + cambiarEstado(nuevoEstado: EstadoPartido)
        + agregarJugador(usuario: Usuario): boolean
        + estaCompleto(): boolean
        + puedeIniciar(): boolean
        + aplicarCriterios(criterios: CriteriosPartido)
    }
    
    class CriteriosPartido {
        -nivelMinimo: string
        -nivelMaximo: string
        -edadMinima: int
        -edadMaxima: int
        -genero: string
        -radioMaximo: float
        + cumpleCriterios(usuario: Usuario): boolean
    }

    class ServicioProgramador {
      -gestorPartido: GestorPartido
      -verificadorHorarios: VerificadorHorarios
      + verificarYActualizarPartidos(partidos: list~Partido~)
    }

    class VerificadorHorarios {
      + esHoraDeIniciar(partido: Partido): boolean
    }
    
    class Ubicacion {
        -latitud: float
        -longitud: float
        -radio: float
        + calcularDistancia(otra: Ubicacion): double
    }
    
    namespace PatronState {
        class EstadoPartido {
            <<interface>>
            + manejarCambioEstado(partido: Partido)
            + puedeAgregarJugador(): boolean
            + puedeConfirmar(): boolean
            + puedeCancelar(): boolean
            + puedeIniciar(): boolean
            + puedeFinalizar(): boolean
            + getNombreEstado(): string
        }
        class NecesitamosJugadores {
           + manejarCambioEstado(partido: Partido)
        }
        class PartidoArmado {
           + manejarCambioEstado(partido: Partido)
        }
        class Confirmado {
           + manejarCambioEstado(partido: Partido)
        }
        class EnJuego {
           + manejarCambioEstado(partido: Partido)
        }
        class Finalizado {
           + manejarCambioEstado(partido: Partido)
        }
        class Cancelado {
           + manejarCambioEstado(partido: Partido)
        }
    }
    
    class Equipo {
        - nombre: string
        - jugadores: list~Usuario~
        - capitan: Usuario
        + agregarJugador(jugador: Usuario)
        + estaCompleto(): boolean
    }
    
    namespace PatronFactory {
        class PartidoFactory {
            <<abstract>>
            + crearPartido(fecha: string, ubicacion: Ubicacion, organizador: Usuario): Partido
            + configurarReglas(partido: Partido)
            + crearPartidoCompleto(fecha: string, ubicacion: Ubicacion, organizador: Usuario): Partido
        }
        
        class FutbolFactory {
            + crearPartido(fecha: string, ubicacion: Ubicacion, organizador: Usuario): Partido
            + configurarReglas(partido: Partido)
        }
        
        class BasquetFactory {
            + crearPartido(fecha: string, ubicacion: Ubicacion, organizador: Usuario): Partido
            + configurarReglas(partido: Partido)
        }
        
        class VoleyFactory {
            + crearPartido(fecha: string, ubicacion: Ubicacion, organizador: Usuario): Partido
            + configurarReglas(partido: Partido)
        }
        
        class TenisFactory {
            + crearPartido(fecha: string, ubicacion: Ubicacion, organizador: Usuario): Partido
            + configurarReglas(partido: Partido)
        }
    }
    
    namespace PatronStrategy {
        class EstrategiaBusqueda {
            <<interface>>
            + buscar(partidos: list~Partido~, usuario: Usuario): list~Partido~
            + cumpleCriterios(partido: Partido, usuario: Usuario): boolean
        }
        
        class BusquedaPorNivel {
            + buscar(partidos: list~Partido~, usuario: Usuario): list~Partido~
            + cumpleCriterios(partido: Partido, usuario: Usuario): boolean
        }
        class BusquedaPorCercania {
            + buscar(partidos: list~Partido~, usuario: Usuario): list~Partido~
            + cumpleCriterios(partido: Partido, usuario: Usuario): boolean
        }
        class BusquedaPorDeporte {
            + buscar(partidos: list~Partido~, usuario: Usuario): list~Partido~
            + cumpleCriterios(partido: Partido, usuario: Usuario): boolean
        }
        class BusquedaPorHistorial {
            + buscar(partidos: list~Partido~, usuario: Usuario): list~Partido~
            + cumpleCriterios(partido: Partido, usuario: Usuario): boolean
        }
        class BusquedaMixta {
            + buscar(partidos: list~Partido~, usuario: Usuario): list~Partido~
            + cumpleCriterios(partido: Partido, usuario: Usuario): boolean
        }
    }
    
    namespace PatronAdapter {
        class ServicioEmail {
            <<interface>>
            + enviarEmail(destinatario: string, asunto: string, mensaje: string): boolean
        }
        
        class ServicioPush {
            <<interface>>
            + enviarPush(usuario: Usuario, titulo: string, mensaje: string): boolean
        }
        
        class JavaMailAdapter {
            + enviarEmail(destinatario: string, asunto: string, mensaje: string): boolean
        }
        class FirebaseAdapter {
            + enviarPush(usuario: Usuario, titulo: string, mensaje: string): boolean
        }
    }
    
    namespace PatronObserver {
        class NotificacionObserver {
            <<interface>>
            + notificar(evento: EventoPartido, partido: Partido)
            + notificarUsuario(usuario: Usuario, titulo: string, mensaje: string)
        }
        
        class EmailNotificador {
            + notificar(evento: EventoPartido, partido: Partido)
            + notificarUsuario(usuario: Usuario, titulo: string, mensaje: string)
        }
        class PushNotificador {
            + notificar(evento: EventoPartido, partido: Partido)
            + notificarUsuario(usuario: Usuario, titulo: string, mensaje: string)
        }
        
        class NotificacionManager {
            - observers: list~NotificacionObserver~
            + agregarObserver(observer: NotificacionObserver)
            + eliminarObserver(observer: NotificacionObserver)
            + notificarObservers(evento: EventoPartido, partido: Partido)
            + notificarUsuarioEspecifico(usuario: Usuario, titulo: string, mensaje: string)
        }
        
        class EventoPartido {
            <<enumeration>>
            PARTIDO_CREADO
            PARTIDO_ARMADO
            PARTIDO_CONFIRMADO
            PARTIDO_EN_JUEGO
            PARTIDO_FINALIZADO
            PARTIDO_CANCELADO
            JUGADOR_UNIDO
        }
    }
    
    %% Relaciones de Patrones
    EstadoPartido <|.. NecesitamosJugadores
    EstadoPartido <|.. PartidoArmado
    EstadoPartido <|.. Confirmado
    EstadoPartido <|.. EnJuego
    EstadoPartido <|.. Finalizado
    EstadoPartido <|.. Cancelado
    
    PartidoFactory <|-- FutbolFactory
    PartidoFactory <|-- BasquetFactory
    PartidoFactory <|-- VoleyFactory
    PartidoFactory <|-- TenisFactory
    
    EstrategiaBusqueda <|.. BusquedaPorNivel
    EstrategiaBusqueda <|.. BusquedaPorCercania
    EstrategiaBusqueda <|.. BusquedaPorDeporte
    EstrategiaBusqueda <|.. BusquedaPorHistorial
    EstrategiaBusqueda <|.. BusquedaMixta
    
    ServicioEmail <|.. JavaMailAdapter
    ServicioPush <|.. FirebaseAdapter
    
    NotificacionObserver <|.. EmailNotificador
    NotificacionObserver <|.. PushNotificador
    
    %% Relaciones de Composición / Agregación
    ServicioDePartidos "1" *-- "1" GestorPartido
    ServicioDePartidos "1" *-- "1" BuscadorPartidos
    ServicioDePartidos "1" *-- "1" NotificacionManager
    ServicioDePartidos "1" *-- "1" ServicioProgramador
    
    GestorPartido "1" *-- "1" NotificacionManager
    
    BuscadorPartidos o-- EstrategiaBusqueda : usa

    ServicioProgramador "1" *-- "1" VerificadorHorarios
    ServicioProgramador "1" *-- "1" GestorPartido
    
    Partido *-- EstadoPartido : contiene
    Partido "1" --> "1" Usuario : organizador
    Partido "1" --> "*" Equipo : contiene
    Partido "0..1" --> "0..1" CriteriosPartido
    
    EmailNotificador --> ServicioEmail : usa
    PushNotificador --> ServicioPush : usa
    
    NotificacionManager o-- NotificacionObserver : notifica
    
    %% Relaciones de Uso (Dependencias)
    DemoSistemaEncuentros ..> ServicioDePartidos : usa
    GestorPartido ..> Partido : gestiona
    GestorPartido ..> PartidoFactory : usa
    BuscadorPartidos ..> Partido : busca
    
    Usuario --> Nivel
    Usuario --> Ubicacion

    